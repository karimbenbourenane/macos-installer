#!/bin/sh
# configurator - System software and environment bootstrapping for macOS.
# TODO: Make this installer script multi-platform and multi-shell compatible.

# Usage message.
usage() {
  tee <<EOF
Usage: $0 [OPTIONS]

OPTIONS:
  --username, -u <github-username>   Specify your GitHub username.
  --help, -h                         Show this help message and exit.

If no username is provided, the script will prompt for it interactively.
For more information, see https://github.com/karimbenbourenane/macos-installer
EOF
}

if [ $# -gt 2 ]; then
  echo "Error: Too many arguments. At most two arguments are allowed."
  usage
  exit 1
fi

# Default GitHub username.
github_username=""

# Parse command-line arguments.
case "$1" in
--username | -u)
  shift
  github_username="$1"
  ;;
--help | -h)
  usage
  exit 0
  ;;
*)
  echo "Invalid option: $1"
  usage
  exit 1
  ;;
esac

# If no username is provided, prompt the user.
if [ -z "$github_username" ]; then
  echo "Enter your GitHub username: "
  read -r github_username
fi

# Begin installation.
echo "Begin system configurator..."
echo "See https://github.com/karimbenbourenane/macos-installer for more info."

# Enable Touch ID for sudo.
echo "Enabling Touch ID for sudo..."
sudo sh -c 'cp /etc/pam.d/sudo_local.template /etc/pam.d/sudo_local'
sudo sh -c 'sed -i "" "s/^#auth/auth/" /etc/pam.d/sudo_local'

# Install chezmoi.
echo "Installing chezmoi and dotfiles..."
sh -c "$(curl -fsLS get.chezmoi.io)" \
  -- -b "$(mktemp -d)" init "$github_username" --ssh --apply

# Create XDG directories.
echo "Creating XDG directories..."
mkdir -p "$HOME"/.config
mkdir -p "$HOME"/.local/bin
mkdir -p "$HOME"/.local/share
mkdir -p "$HOME"/.local/state

# Load XDG logout script.
launchctl load ~/Library/LaunchAgents/org.freedesktop.specifications.plist

# Set Zsh configuration directory globally to use standard XDG location.
# TODO: backup the original file if it already exists.
sudo sh -c 'tee -a /etc/zshenv >/dev/null <<EOF
# Inform Jetbrains IDEs of $ZDOTDIR's true path and set $ZDOTDIR if empty.
if [ -n "${ZDOTDIR}" ] && [ "${ZDOTDIR}" != "${HOME}"/.config/zsh ]; then
    _INTELLIJ_ORIGINAL_ZDOTDIR="${HOME}"/.config/zsh
else
    ZDOTDIR="${HOME}"/.config/zsh
fi
EOF

# Install Oh My Zsh.
echo "Installing Oh My Zsh..."
export ZDOTDIR="$HOME/.config/zsh"
export ZSH="$HOME/.local/share/ohmyzsh"
sh -c "$(curl -fsSL \
  https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# Install Homebrew.
echo "Installing Homebrew..."
bash -c "$(curl -fsSL \
  https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Install bundles (system packages and desktop applications).
echo "Installing Homebrew bundles..."
$(command -v brew) bundle --file "$HOME/.config/homebrew/Brewfile" install

# Fix permissions for some Homebrew packages on Apple Silicon.
if [ -d '/opt/homebrew/share' ]; then
  echo "Fixing permissions for Homebrew packages..."
  chmod -R go-w '/opt/homebrew/share'
fi

# Check local scripts.
echo "Checking local scripts..."
if $(command -v brew) list pycharm >/dev/null 2>&1; then
  if [ -f "$HOME/.local/bin/pycharm" ]; then
    chmod +x "$HOME/.local/bin/pycharm"
    echo "PyCharm script can be found at $HOME/.local/bin/pycharm."
  else
    echo "PyCharm script is missing from $HOME/.local/bin/pycharm."
  fi
else
  echo "PyCharm is not installed."
fi

# Install all vim-plug plugins.
echo "Installing vim-plug plugins..."
vi -Esu "$HOME/.config/vim/vimrc" +quitall

# Install Github Copilot for command line.
echo "Installing Github Copilot for command line..."
gh extension install github/copilot-cli --force

# Complete installation.
echo "System configurator completed."
echo "Please open a new shell session to complete the installation."
